#ifndef matrix_CPP
#define matrix_CPP

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//matrix realization
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Create
template<class T>
matrix<T>::matrix(int m, int n): M(m), N(n)
{
    if((M) && (N))
    {
        Data = new T*[M];
        for(int i = 0; i < M; ++i)
        {
            Data[i] = new T[N];
            for(int j = 0; j < N; ++j)
                Data[i][j] = 0;
        }
    }
    else
    {
        Data = NULL;
    }
}

template<class T>
matrix<T>::matrix(const matrix<T> &a): M(a.Get_M()), N(a.Get_N())
{
    Data = new T*[M];
    for(int i = 0; i < M; ++i)
    {
        Data[i] = new T[N];
        for(int j = 0; j < N; ++j)
            Data[i][j] = a.Get(i, j);
    }
    return;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Get
template<class T>
T matrix<T>::Get(int i, int j) const
{
    if ((i < (M)) && (j < (N)))
        return Data[i][j];
    cout << "You try to get the Data out of matrix" << endl;
    NULL_ERROR();
    return 0;
}

template<class T>
int matrix<T>::Get_M() const
{
    return M;
}

template<class T>
int matrix<T>::Get_N() const
{
    return N;
}

template<class T>
T matrix<T>::Get_sled() const
{
    T res = 0;
    for (int i = 0; i < this->Get_N(); ++i)
        res += this->Get(i,i);
    return res;
}

template<class T>
double matrix<T>::Get_det() const
{
//    matrix<T> draft(*this);
//    double det = 1;
//    for (int i = 0; i < draft.Get_N(); ++i)
//    {
//        int k = i;
//        for (int j= i + 1; j < draft.Get_N(); ++j)
//            if (abs (draft.Get(j, i)) > abs (draft.Get(k, i)))
//                k = j;
//        draft.Swap(i, k);
//        if (i != k)
//            det = -det;
//        det *= draft.Get(i, i);
//        for (int j = i + 1; j < this->Get_N(); ++j)
//            draft.Set(i, j, draft.Get(i, j) / draft.Get(i, i));
//        for (int j = 0; j < this->Get_N(); ++j)
//            if (j != i)
//                for (int k = i + 1; k < this->Get_N(); ++k)
//                    draft.Set(j, k, draft.Get(j, k) - (draft.Get(i, k) * draft.Get(j, i)));
//    }
//    return det;



//    double draft[this->Get_N()][this->Get_N()+1];
//    for(int i = 0; i < this->Get_N(); ++i)
//    {
//        for(int j = 0; j < this->Get_N(); ++j)
//            draft[i][j] = this->Get(i, j);
//        draft[i][this->Get_N()] = 0;
//    }
//    cout << "---Debug output-start-----------------------" << endl;
//    for (int i = 0; i < this->Get_N(); ++i)
//    {
//        for(int j = 0; j <= this->Get_N(); ++j)
//            cout << draft[i][j] << '\t';
//        cout << endl;
//    }
//    cout << "---End debug output-------------------------" << endl;
//    double det = 1;
//    double m = 0;
//    for(int k = 1; k < this->Get_N(); ++k)
//        for(int j = k; j < this->Get_N(); ++j)
//        {
//            m = (draft[j][k -1] + 0.0) / draft[k-1][k-1];
//            for(int i = 0; i <= this->Get_N(); ++i)
//                draft[j][i] = draft[j][i] - m * draft[k-1][i];
//            cout << "---Debug output-----------------------------" << endl;
//            cout << "---" << k << "-" << m << "--------------------------------------" << endl;
//            for (int i = 0; i < this->Get_N(); ++i)
//            {
//                for(int j = 0; j <= this->Get_N(); ++j)
//                    cout << draft[i][j] << '\t';
//                cout << endl;
//            }
//            cout << "---End debug output-------------------------" << endl;
//        }

//    cout << "---Debug output-----------------------------" << endl;
//    for (int i = 0; i < this->Get_N(); ++i)
//    {
//        for(int j = 0; j <= this->Get_N(); ++j)
//            cout << draft[i][j] << '\t';
//        cout << endl;
//    }
//    cout << "---End debug output-------------------------" << endl;
//    return det;


    double draft[this->Get_N()][this->Get_N()+1];
    for(int i = 0; i < this->Get_N(); ++i)
    {
        for(int j = 0; j < this->Get_N(); ++j)
            draft[i][j] = this->Get(i, j);
        draft[i][this->Get_N()] = 0;
    }
    double det = 1;
    int j = 0;
    int count = 1;
    for (int i = 0; i < this->Get_N() - 1; ++i)
    {
        for (j = i; j < this->Get_N(); ++j)
            if (draft[j][i] != 0)
                break;
        if (j == this->Get_N())
            return 0;
        else
            if (i != j)
            {
                count *= (-1);
                double tmp = 0;
                for(int k = 0; k < this->Get_N(); ++k)
                {
                    tmp = draft[i][k];
                    draft[i][k] = draft[j][k];
                    draft[j][k] = tmp;
                }
            }
        det *= draft[i][i];
        for (j = i + 1; j < this->Get_N(); ++j)
        {
            double mul = draft[j][i] / draft[i][i];
            for (int k = i + 1; k < this->Get_N(); ++k)
                draft[j][k] -= draft[i][k] * mul;
        }
    }
    return det * draft[this->Get_N()-1][this->Get_N()-1] * count;
}

template<class T>
matrix<T> matrix<T>::Get_trans() const
{
    matrix<T> result(this->Get_N(), this->Get_M());
    for(int i = 0; i < this->Get_M(); ++i)
        for(int j = 0; j < this->Get_N(); ++j)
            result.Set(j, i, this->Get(i, j));
    return result;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Streams
template<class T>
ostream& operator << (ostream& out, const matrix<T>& a)
{
    for(int i = 0; i < a.Get_M(); ++i)
    {
        for(int j = 0; j < a.Get_N(); ++j)
            out << a.Get(i, j) << '\t';
        out << endl;
    }
    return out;
}

template<class T>
istream& operator >> (istream& in, const matrix<T>& a)
{
    for(int i = 0; i < a.Get_M(); ++i)
        for(int j = 0; j < a.Get_N(); ++j)
        {
            T draft = 0;
            in >> draft;
            a.Set(i, j, draft);
        }
    return in;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Set
template<class T>
void matrix<T>::Set(int i, int j, T value) const
{
    if ((i < (this->Get_M())) && (j < (this->Get_N())))
    {
        Data[i][j] = value;
        return;
    }
    cout << "You try to get the Data out of matrix" << endl;
    NULL_ERROR();
    return;
}

template<class T>
void matrix<T>::Set_all_rand(int mod) const
{
    srand (time(NULL));
    for(int i = 0; i < this->Get_M(); ++i)
        for(int j = 0; j < this->Get_N(); ++j)
            Data[i][j] = rand()&mod;
    return;
}

template<class T>
void matrix<T>::Swap(int i, int j)
{
    for(int k = 0; k < this->Get_N(); ++k)
    {
        T draft = this->Get(i, k);
        this->Set(i, k, this->Get(j, k));
        this->Set(j, k, draft);
    }
    return;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Operator
template<class T>
T* matrix<T>::operator [](int i) const
{
    return Data[i];
}

template<class T>
matrix<T>& matrix<T>::operator =(const matrix<T> &a)
{
//    if (a == *this)
//        return *this;
    T** new_Data = new T*[a.Get_M()];
    for (int i = 0; i < a.Get_M(); ++i)
    {
        new_Data[i] = new T[a.Get_N()];
        for(int j = 0; j < a.Get_N(); ++j)
            new_Data[i][j] = a.Get(i, j);
    }
    delete[]Data;
    Data = new_Data;
    M = a.Get_M();
    N = a.Get_N();
    return *this;
}

template<class T>
matrix<T> matrix<T>::operator +(const matrix<T>& a) const
{
    if(( M != a.Get_M() )||( N != a.Get_N() ))
    {
        cout << "Error, matrix's sizes are different" << endl;
        NULL_ERROR();
        return *this;
    }
    matrix<T> result(M,N);
    for (int i = 0; i < this->Get_M(); ++i)
        for (int j = 0; j < this->Get_N(); ++j)
            result.Set(i,j, this->Get(i,j) + a.Get(i,j));
    return result;
}

template<class T>
matrix<T> matrix<T>::operator -(const matrix<T>& a) const
{
    if(( M != a.Get_M() )||( N != a.Get_N() ))
    {
        cout << "Error, matrix's sizes are different" << endl;
        NULL_ERROR();
        return *this;
    }
    matrix result(M,N);
    for (int i = 0; i < this->Get_M(); ++i)
        for (int j = 0; j < this->Get_N(); ++j)
            result.Set(i,j, this->Get(i,j) - a.Get(i,j));
    return result;
}

template<class T>
matrix<T> matrix<T>::operator *(const matrix<T>& a) const
{
    if(( M != a.Get_M() )||( N != a.Get_N() ))
    {
        cout << "Error, matrix's sizes are different" << endl;
        NULL_ERROR();
        return *this;
    }
    matrix result(M,N);
    T draft;
    for (int i = 0; i < this->Get_M(); ++i)
        for (int j = 0; j < this->Get_N(); ++j)
        {
            draft = 0;
            for (int i1 = 0; i1 < this->Get_M(); ++i1)
                for (int j1 = 0; j1 < this->Get_N(); ++j1)
                    draft += this->Get(i1, j) + a.Get(i, j1);
            result.Set(i,j, draft);
        }
    return result;
}

//template<>
//matrix<double> matrix<int>::operator +(const matrix<double>& a) const
//{
//    if(( M != a.Get_M() )||( N != a.Get_N() ))
//    {
//        cout << "Error, matrix's sizes are different" << endl;
//        NULL_ERROR();
//        return *this;
//    }
//    matrix result(M,N);
//    for (int i = 0; i < M; ++i)
//        for (int j = 0; j < N; ++j)
//            result.Set(i,j, Data[i][j] + a.Get(i,j));
//    return result;
//}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Delete
template<class T>
matrix<T>::~matrix()
{
    if (Data != NULL)
    {
        for(int i = 0; i < M; ++i)
            delete[]Data[i];
        delete[]Data;
    }
}

#endif // matrix_CPP
