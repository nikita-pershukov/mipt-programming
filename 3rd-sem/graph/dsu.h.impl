#ifndef DSU_CPP
#define DSU_CPP

#include "dsu.h"

// constructor -------------------------------------------------------------------------

template <typename V>
dsu<V>::dsu(V n): _parent(std::vector<V> (n)), _rank(std::vector<V> (n)) {

}

// make set -------------------------------------------------------------------------

template <typename V>
void dsu<V>::MakeSet(V a) {
    _parent[a] = a;
    _rank[a] = 0;
}

// find set -------------------------------------------------------------------------

template <typename V>
V dsu<V>::FindSet(V a) {
    if (a == _parent[a])
        return a;
    return _parent[a] = this->FindSet(_parent[a]);
}

// union -------------------------------------------------------------------------

template <typename V>
void dsu<V>::Union(V a, V b) {
    a = this->FindSet(a);
    b = this->FindSet(b);
    if (a != b) {
        if (_rank[a] < _rank[b])
            std::swap(a, b);
        _parent[b] = a;
        if (_rank[a] == _rank[b])
            ++_rank[a];
    }

}

#endif // DSU_CPP
